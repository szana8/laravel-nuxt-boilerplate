services:
    #PHP Service
    workspace:
        build:
            context: .
            dockerfile: ./api/Dockerfile
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        container_name: ${APP_CONTAINER_NAME}-workspace
        tty: true
        working_dir: /var/www
        command: bash -c 'php artisan serve --host 0.0.0.0 --port=${BACKEND_PORT}'
        ports:
            - "${BACKEND_PORT:-8000}:${BACKEND_PORT:-8000}"
            - "${REVERB_SERVER_PORT:-8080}:${REVERB_SERVER_PORT:-8080}"
        volumes:
            - ./api:/var/www
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/999-overrides.ini
            - ./docker/php/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
        networks:
            - app-network
        depends_on:
            - mysql
            - redis
            - nuxt

    #Nginx Service
    nginx:
        image: nginx:alpine
        container_name: nginx
        tty: true
        ports:
            - '${SSL_BACKEND_PORT:-443}:443'
            - '${NUXT_PORT:-3000}:3000'
            - "${REVERB_CLIENT_PORT:-8090}:${REVERB_CLIENT_PORT:-8090}"
        volumes:
            - ./api:/var/www
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
            - ./docker/certificates:/etc/nginx/ssl/certificates
        environment:
            - APP_URL=${APP_CONTAINER_NAME}.test
            - APP_WORKSPACE=${APP_CONTAINER_NAME}-workspace
        networks:
            - app-network
        depends_on:
            - workspace
            - nuxt

    #Nuxt Service
    nuxt:
        build:
            context: .
            dockerfile: ./web/Dockerfile
        container_name: ${APP_CONTAINER_NAME}-nuxt
        command: bash -c 'yarn run dev'
        tty: true
        environment:
            - NODE_TLS_REJECT_UNAUTHORIZED=0
            - NODE_EXTRA_CA_CERTS=/etc/ssl/certificates/test.certificate.pem
        volumes:
            - ./web:/usr/src/nuxt-app
            - ./docker/certificates:/etc/ssl/certificates
        networks:
            - app-network

    #MySQL Service
    mysql:
        image: mysql:latest
        container_name: ${APP_CONTAINER_NAME}-db
        tty: true
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        environment:
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=root
        volumes:
            - '~/.${APP_CONTAINER_NAME}/data/mysql:/var/lib/mysql'
        ports:
            - '${DB_PORT:-3306}:${DB_PORT:-3306}'
        networks:
            - app-network

    # Redis service
    redis:
        image: 'redis:alpine'
        container_name: ${APP_CONTAINER_NAME}-redis
        command: redis-server --requirepass ${REDIS_PASSWORD}
        tty: true
        networks:
            - app-network

#Docker Networks
networks:
    app-network:
        driver: bridge

#Volumes
volumes:
    dbdata:
        driver: local
